{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "arksys Microservice API Specification",
    "description" : "API guide for safe-guarding and preservation of archival data",
    "version" : "6.2.7-7-gf4b6919d63"
  },
  "servers" : [ {
    "url" : "https://host.example.com/api/arksys",
    "description" : "Production server (uses live data)"
  } ],
  "security" : [ {
    "OAuth2" : [ "Please contact Arkivum Support for OAuth2 parameters for your tenant" ]
  } ],
  "tags" : [ {
    "name" : "Export",
    "description" : "Request and monitor the progress of exports"
  }, {
    "name" : "Ingest",
    "description" : "Create and monitor the progress of ingests"
  } ],
  "paths" : {
    "/retention/{id}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get a specific retention schedule by its ID",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Edit the default flag for a retention schedule",
        "operationId" : "setDefault",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDefault",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0/{id}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get a specific retention schedule by its ID",
        "operationId" : "read_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Edit the default flag for a retention schedule",
        "operationId" : "setDefault_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDefault",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/relation" : {
      "get" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get a list of relations given an externalId",
        "operationId" : "getRelationsByExternalId",
        "parameters" : [ {
          "name" : "externalId",
          "in" : "query",
          "description" : "The externalId to get relations for",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Create relation between two entities",
        "operationId" : "createRelation",
        "parameters" : [ {
          "name" : "relationType",
          "in" : "query",
          "description" : "The type of relation between the two entities",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "query",
          "description" : "The name of the source entity in the relation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "destinationId",
          "in" : "query",
          "description" : "The name of the destination entity in the relation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jobRequestId",
          "in" : "query",
          "description" : "The id of the JobRequest in which this relation is created",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Relation successfully created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Relation"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Remove relation(s) between two entities",
        "operationId" : "deleteRelation",
        "parameters" : [ {
          "name" : "id1",
          "in" : "query",
          "description" : "The name of the first entity in the relation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id2",
          "in" : "query",
          "description" : "The name of the second entity in the relation",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "relationType",
          "in" : "query",
          "description" : "The type of relation to be removed. If no type is supplied all relations between the two entities will be removed",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Relation(s) successfully removed"
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/relation/kind" : {
      "get" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get a RelationKind by its kind",
        "operationId" : "getRelationKind",
        "parameters" : [ {
          "name" : "kindValue",
          "in" : "query",
          "description" : "The relation kindValue",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelationKind"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Create a Relation Kind",
        "operationId" : "createRelationKind",
        "parameters" : [ {
          "name" : "kindValue",
          "in" : "query",
          "description" : "The Relation Kind value",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelationKind"
                }
              }
            }
          },
          "400" : {
            "description" : "Request was malformed in some way",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelationKind"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Delete a Relation Kind",
        "operationId" : "deleteRelationKind",
        "parameters" : [ {
          "name" : "kindValue",
          "in" : "query",
          "description" : "The Relation Kind value",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted"
          },
          "400" : {
            "description" : "Request was malformed in some way"
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/queries" : {
      "get" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Get all saved search queries for a user.",
        "operationId" : "getSavedSearchQueriesList",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedSearchQuery"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Update a search query in MongoDB.",
        "operationId" : "updateSearchQuery",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "List of applicable Aggregation Types",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Set to either REGULAR or PRESERVATION",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Represents the query that is to be saved",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "queryName",
          "in" : "query",
          "description" : "The name of the saved query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The id of the query to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchQuery"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Save a search query in MongoDB.",
        "operationId" : "saveSearchQuery",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "List of applicable Aggregation Types",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Set to either REGULAR or PRESERVATION",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Represents the query that is to be saved",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "queryName",
          "in" : "query",
          "description" : "The name of the saved query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists the data pools that the logged in user has access to",
        "operationId" : "getDatapoolsForLoginUser",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoDatapool"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Update an empty datapool.",
        "operationId" : "updateEmpty",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Datapool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Cannot update datapool as it is not empty; Cannot remove AtoM or ISADG namespaces from an AtoM enabled datapool; Cannot remove Dublin Core namespace from an AtoM disabled datapool; Identifier namespace is required for preservation enabled datapools; Technical namespace is required for datapools",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated the empty datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Creates datapool",
        "operationId" : "create_3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Datapool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Invalid encryption key",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Created datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "400" : {
            "description" : "Datapool name is required; Datapool name exists; Datapool path is required; Datapool path exists; Invalid datapool; Cannot create datapool with path, Location set ID does not exist, Cannot create an atom enabled datapool with preservation disabled; Cannot create datapool: namespace(s) do not exist",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists the data pools that the logged in user has access to",
        "operationId" : "getDatapoolsForLoginUser_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoDatapool"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Update an empty datapool.",
        "operationId" : "updateEmpty_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Datapool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Cannot update datapool as it is not empty; Cannot remove AtoM or ISADG namespaces from an AtoM enabled datapool; Cannot remove Dublin Core namespace from an AtoM disabled datapool; Identifier namespace is required for preservation enabled datapools; Technical namespace is required for datapools",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated the empty datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Creates datapool",
        "operationId" : "create_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Datapool"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Invalid encryption key",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Created datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "400" : {
            "description" : "Datapool name is required; Datapool name exists; Datapool path is required; Datapool path exists; Invalid datapool; Cannot create datapool with path, Location set ID does not exist, Cannot create an atom enabled datapool with preservation disabled; Cannot create datapool: namespace(s) do not exist",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/config/dedicated/archivematica" : {
      "put" : {
        "tags" : [ "system-config-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get the cleanup config for either the import or export bucket.",
        "operationId" : "updateDedicatedArchivematica",
        "parameters" : [ {
          "name" : "isDedicatedArchivematica",
          "in" : "query",
          "description" : "The new value for the dedicated archivematica flag",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemConfig"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/config/cleanup" : {
      "get" : {
        "tags" : [ "system-config-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get the cleanup config for either the import or export bucket.",
        "operationId" : "getImportExportCleanupConfig",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Get the cleanup config for either the import or export bucket.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "Get the cleanup config for this location.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CleanupConfig"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "system-config-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Configure whether files are automatically cleaned up from either the import or export bucket.",
        "operationId" : "updateImportExportCleanupConfig",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The type of bucket to clean up - IMPORT or EXPORT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "Get the cleanup config for this location.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The new value for the import or export cleanup config",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemConfig"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/retention/{retentionId}" : {
      "put" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Updates a retention schedule associated with an aggregation.A successful response returns the modified aggregation in the response body.The endpoint contains the aggregation identifier that's to be updated and also the retention identifier that's to be updated. That retention identifier is replaced with the retention identifier that is specified in the request",
        "operationId" : "updateRetention",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retentionId",
          "in" : "path",
          "description" : "Unique identifier of the retention schedule that you want to replace.The retention schedule must already exist.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retentionId" ],
                "type" : "string",
                "description" : "Unique identifier of the retention schedule to be associated with the aggregation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Cannot update Retention. Retention <retention id> does not exist on Aggregation <aggregation id>; Cannot add Retention to Aggregation. Retention type is different: <retention type>; Cannot add Retention to Aggregation. Retention category is different: <retention category>; ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to update audit table on deleting retention <retention id> from aggregation <aggregation id>",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot update retention of Aggregation. No entity with id <aggregation id> exists; Cannot update retention of Aggregation. No retention with id <retention id> exists",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Deletes a retention schedule associated with an aggregation.",
        "operationId" : "deleteRetention",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retentionId",
          "in" : "path",
          "description" : "Unique identifier of the retention schedule to be associated with the aggregation.The retention schedule must already exist.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retention",
          "in" : "query",
          "description" : "Flag to specify whether default retention should be reapplied if no retentions are left on the entity",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/retention/{retentionId}" : {
      "put" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Updates a retention schedule associated with an aggregation.A successful response returns the modified aggregation in the response body.The endpoint contains the aggregation identifier that's to be updated and also the retention identifier that's to be updated. That retention identifier is replaced with the retention identifier that is specified in the request",
        "operationId" : "updateRetention_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retentionId",
          "in" : "path",
          "description" : "Unique identifier of the retention schedule that you want to replace.The retention schedule must already exist.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retentionId" ],
                "type" : "string",
                "description" : "Unique identifier of the retention schedule to be associated with the aggregation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Cannot update Retention. Retention <retention id> does not exist on Aggregation <aggregation id>; Cannot add Retention to Aggregation. Retention type is different: <retention type>; Cannot add Retention to Aggregation. Retention category is different: <retention category>; ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to update audit table on deleting retention <retention id> from aggregation <aggregation id>",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot update retention of Aggregation. No entity with id <aggregation id> exists; Cannot update retention of Aggregation. No retention with id <retention id> exists",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Deletes a retention schedule associated with an aggregation.",
        "operationId" : "deleteRetention_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retentionId",
          "in" : "path",
          "description" : "Unique identifier of the retention schedule to be associated with the aggregation.The retention schedule must already exist.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retention",
          "in" : "query",
          "description" : "Flag to specify whether default retention should be reapplied if no retentions are left on the entity",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/tree" : {
      "post" : {
        "tags" : [ "entity-tree-view-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "If given a parentId it will return a paginated list of aggregations (of collection or object type) that are the children of the given aggregation. Otherwise it will return a list of all aggregations (of collection or object type) that do not have a parent.",
        "operationId" : "getAggregationTreeView",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of page to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "parentId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "External aggregation ID to query for its children. If empty then it will return all aggregations without a parent."
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Fields to sort by, prefixed with '-' for descending",
            "default" : "unsorted"
          }
        }, {
          "name" : "view",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "View type to use",
            "enum" : [ "PCDM", "FILESYSTEM" ]
          }
        }, {
          "name" : "datapools",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Datapools to use"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Given entity ID could not be found - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful search with tree view results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityTreeView"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error during search - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/records" : {
      "post" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Gets a page of retention schedules",
        "operationId" : "getAllRecords",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCriteria"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0/records" : {
      "post" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Gets a page of retention schedules",
        "operationId" : "getAllRecords_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCriteria"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention" : {
      "post" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Create a new retention schedule",
        "operationId" : "create",
        "parameters" : [ {
          "name" : "years",
          "in" : "query",
          "description" : "The number of years that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "The number of days that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "hours",
          "in" : "query",
          "description" : "The number of hours that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "minutes",
          "in" : "query",
          "description" : "The number of minutes that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "A short description for what the retention rule will be used for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDefault",
          "in" : "query",
          "description" : "Whether this is the default retention or not",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "The action to be carried out when the retention ends",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "delete", "export", "review" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type for which the retention can be applied",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The unique identifier of the retention",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0" : {
      "post" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Create a new retention schedule",
        "operationId" : "create_1",
        "parameters" : [ {
          "name" : "years",
          "in" : "query",
          "description" : "The number of years that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "The number of days that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "hours",
          "in" : "query",
          "description" : "The number of hours that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "minutes",
          "in" : "query",
          "description" : "The number of minutes that an entity should be retained for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "A short description for what the retention rule will be used for",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDefault",
          "in" : "query",
          "description" : "Whether this is the default retention or not",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "The action to be carried out when the retention ends",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "delete", "export", "review" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type for which the retention can be applied",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The unique identifier of the retention",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Retention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/metadata/namespace/config" : {
      "get" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get all Metadata Namespace Configurations",
        "operationId" : "getAll",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoMetadataNamespaceConfig"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal error occurred",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Create a Metadata Namespace configuration",
        "operationId" : "create_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MetadataNamespaceConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Failed to add mapping {prefix} for aggregationType {type} tenant {tenant}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Created Metadata Namespace configuration",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataNamespaceConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "MetadataNamespaceConfig undefined; MetadataNamespaceConfig uri is undefined; MetadataNamespaceConfig prefix is undefined; MetadataNamespaceConfig label is undefined; MetadataNamespaceConfig fields is undefined; Null is not a valid Aggregation Type!; MetadataNamespaceConfig is mandatory and no mandatory field present in the config; MetadataNamespaceConfig fields are repeated; MetadataNamespaceConfig prefix is already present in the system; MetadataNamespaceConfig prefix has '.' in the name",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletes metadata namespace",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "uri",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Namespace deleted"
          },
          "404" : {
            "description" : "Namespace doesn't exist",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/integrity/report" : {
      "post" : {
        "tags" : [ "integrity-controller" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Generates the integrity report",
        "operationId" : "getIntegrityReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCriteria"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntityProcessingState"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/integrity/v1.0/report" : {
      "post" : {
        "tags" : [ "integrity-controller" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Generates the integrity report",
        "operationId" : "getIntegrityReport_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCriteria"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntityProcessingState"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/integrity/location/labels" : {
      "post" : {
        "tags" : [ "integrity-controller" ],
        "operationId" : "getLocationLabels",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/integrity/v1.0/location/labels" : {
      "post" : {
        "tags" : [ "integrity-controller" ],
        "operationId" : "getLocationLabels_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest" : {
      "post" : {
        "tags" : [ "Ingest" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Ingest data from an ingest location",
        "operationId" : "createIngest",
        "parameters" : [ {
          "name" : "ingestPath",
          "in" : "query",
          "description" : "The path within the ingest location to files (or file) to be ingested, should be URL encoded",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "metadataPath",
          "in" : "query",
          "description" : "The path within the ingest location to a metadata file, should be URL encoded",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "The name of the datapool into which files are to be ingested, should be URL encoded. Defaults to the default datapool",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folderPath",
          "in" : "query",
          "description" : "The folder path used to prefix files paths being ingested, should be URL encoded",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jobTag",
          "in" : "query",
          "description" : "A tag to be used to link related ingests, should be URL encoded",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "unpack",
          "in" : "query",
          "description" : "Whether archives detected in the ingest location are unpacked or ingested without unpacking. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "isArchive",
          "in" : "query",
          "description" : "Whether archives detected in the ingest location are unpacked before the ingest begins or ingested without unpacking. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "splitterChildren",
          "in" : "query",
          "description" : "The maximum number of files under a collection or object which can be preserved in one job. Above the threshold files are allocated to separate preservation jobs. Defaults to 10,000",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an ingest location. Defaults to the first ingest location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ingest"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/{id}" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export a single entity and its children. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "export",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id to be exported",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "BAGIT",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/v1.0/{id}" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export a single entity and its children. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "export_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id to be exported",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "BAGIT",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/query" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export the results of a query. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "exportQuery",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "List of applicable Aggregation Types",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names. Include only files in the list or if omitted all files.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Include only preserved or regular files or if omitted all files",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query to search on",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "BAGIT",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/v1.0/query" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export the results of a query. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "exportQuery_1",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "List of applicable Aggregation Types",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names. Include only files in the list or if omitted all files.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Include only preserved or regular files or if omitted all files",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The query to search on",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "BAGIT",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export a list of entities. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "exportList",
        "parameters" : [ {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Export Request body. Contains a list of ids to be exported",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/v1.0" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export a list of entities. The exported contents and associated metadata are placed in the requested location.",
        "operationId" : "exportList_1",
        "parameters" : [ {
          "name" : "exportPath",
          "in" : "query",
          "description" : "The path within the export location. Defaults to export/{exportId}",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "The identifier of an export location. Defaults to the first export location.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportMetadataType",
          "in" : "query",
          "description" : "Whether to export content, metadata or both.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "CONTENT",
            "enum" : [ "CONTENT", "METADATA", "CONTENT_AND_METADATA", "ARCHIVEMATICA_SIP" ]
          }
        }, {
          "name" : "includeURI",
          "in" : "query",
          "description" : "Whether to include the uri of the files in the exported ark-manifest.json. Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "exportFormat",
          "in" : "query",
          "description" : "The format that the data should be exported as. Ignored if exportMetadataType is set to 'CONTENT'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "BAGIT", "RAW" ]
          }
        }, {
          "name" : "includeTechnicalMetadata",
          "in" : "query",
          "description" : "Whether to include technical metadata in ark-manifest.json. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Export Request body. Contains a list of ids to be exported",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/es/metadata/search/query/{type}" : {
      "get" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for documents in Elasticsearch. This is a simpler option for writing quick queries but it limits what one can search for. The parameter of the request is the search query string.\nNote: All '/' in queries must be preceded by a '\\', i.e. a search for 'foo/bar' must be written as 'foo\\/bar'\n",
        "operationId" : "queryFilterByGet",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Where type is either F, O or C for File, Object or Collection respectively",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Represents the query that is sent to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for metadata documents in Elasticsearch.\nFull documentation on writing these queries can be found in the Elasticsearch 7.x documentation: \nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html\n",
        "operationId" : "queryFilterByPost",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Where type is either F, O or C for File, Object or Collection respectively",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of pages to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/es/v1.0/metadata/search/query/{type}" : {
      "get" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for documents in Elasticsearch. This is a simpler option for writing quick queries but it limits what one can search for. The parameter of the request is the search query string.\nNote: All '/' in queries must be preceded by a '\\', i.e. a search for 'foo/bar' must be written as 'foo\\/bar'\n",
        "operationId" : "queryFilterByGet_1",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Where type is either F, O or C for File, Object or Collection respectively",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Represents the query that is sent to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for metadata documents in Elasticsearch.\nFull documentation on writing these queries can be found in the Elasticsearch 7.x documentation: \nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html\n",
        "operationId" : "queryFilterByPost_1",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Where type is either F, O or C for File, Object or Collection respectively",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of pages to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/es/metadata/search/query" : {
      "get" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for documents in Elasticsearch. This is a simpler option for writing quick queries but it limits what one can search for. The parameter of the request is the search query string.\nNote: All '/' in queries must be preceded by a '\\', i.e. a search for 'foo/bar' must be written as 'foo\\/bar'\n",
        "operationId" : "queryFilterByGet_2",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "List of applicable Aggregation Types",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Set to either REGULAR or PRESERVATION",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Represents the query that is sent to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of page to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for metadata documents in Elasticsearch.\nFull documentation on writing these queries can be found in the Elasticsearch 7.x documentation: \nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html\n",
        "operationId" : "queryFilterByPostNoType",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of pages to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/es/v1.0/metadata/search/query" : {
      "get" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for documents in Elasticsearch. This is a simpler option for writing quick queries but it limits what one can search for. The parameter of the request is the search query string.\nNote: All '/' in queries must be preceded by a '\\', i.e. a search for 'foo/bar' must be written as 'foo\\/bar'\n",
        "operationId" : "queryFilterByGet_3",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "List of applicable Aggregation Types",
            "enum" : [ "C", "O", "F" ]
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "List of datapool names",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "fileClass",
          "in" : "query",
          "description" : "Set to either REGULAR or PRESERVATION",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Represents the query that is sent to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of page to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata-es-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Searches for metadata documents in Elasticsearch.\nFull documentation on writing these queries can be found in the Elasticsearch 7.x documentation: \nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html\n",
        "operationId" : "queryFilterByPostNoType_1",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of pages to return",
            "default" : "1"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "string",
            "description" : "Number of items in a page",
            "default" : "1000"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Sort criteria",
            "default" : "unsorted",
            "enum" : [ "ASC", "DESC" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Incorrect search parameter or too many search results - 'errorMessage' in response should give more details",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Search successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{parentId}/children" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new aggregation of type ‘C’ or ‘O’’, which represents a collection or object. This new entity is created as a child (or a ‘member’ in PCDM terminology) of the specified parent.",
        "operationId" : "createChild",
        "parameters" : [ {
          "name" : "parentId",
          "in" : "path",
          "description" : "The aggregation UUID of the parent ID.The specified parentId must refer to an existing aggregation",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "parent1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAggregationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Failed to identify default retention for type '%s' and category '%s'.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Cannot create aggregation with ID '<aggr_id>' as it is already in use.Cannot create aggregation <aggregation id> with category >aggregation category>, as that category does not exist.Cannot create aggregation with null type.Mandatory parameter missing: aggregationType.Cannot create aggregation with id: '<aggr_d>'.The proposed membership relationship would create a cycle in the database. For example, if A contains B contains C and an attempt is made to add A as a child of C, this would be prevented.The proposed membership relationship is invalid with the respect to the PCDM spec (C>C, C>O, O>O).",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successfully created child of the entity",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateChildResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot create aggregation with retention ID '<retention_id>' as it is not recognised.Cannot add Retention to Aggregation. Retention type is different: <retention type>Cannot add Retention to Aggregation. Retention category is different: <retention category>The provided parentId does not refer to an existing parent entity.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Database update errors.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{parentId}/children" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new aggregation of type ‘C’ or ‘O’’, which represents a collection or object. This new entity is created as a child (or a ‘member’ in PCDM terminology) of the specified parent.",
        "operationId" : "createChild_1",
        "parameters" : [ {
          "name" : "parentId",
          "in" : "path",
          "description" : "The aggregation UUID of the parent ID.The specified parentId must refer to an existing aggregation",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "parent1"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAggregationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Failed to identify default retention for type '%s' and category '%s'.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Cannot create aggregation with ID '<aggr_id>' as it is already in use.Cannot create aggregation <aggregation id> with category >aggregation category>, as that category does not exist.Cannot create aggregation with null type.Mandatory parameter missing: aggregationType.Cannot create aggregation with id: '<aggr_d>'.The proposed membership relationship would create a cycle in the database. For example, if A contains B contains C and an attempt is made to add A as a child of C, this would be prevented.The proposed membership relationship is invalid with the respect to the PCDM spec (C>C, C>O, O>O).",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successfully created child of the entity",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateChildResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot create aggregation with retention ID '<retention_id>' as it is not recognised.Cannot add Retention to Aggregation. Retention type is different: <retention type>Cannot add Retention to Aggregation. Retention category is different: <retention category>The provided parentId does not refer to an existing parent entity.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Database update errors.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/retention" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Adds an existing retention schedule to an aggregation (object or collection).",
        "operationId" : "addRetention",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retentionId" ],
                "type" : "string",
                "description" : "Unique identifier of the retention schedule to be added to the aggregation.The retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/retention" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Adds an existing retention schedule to an aggregation (object or collection).",
        "operationId" : "addRetention_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "retentionId" ],
                "type" : "string",
                "description" : "Unique identifier of the retention schedule to be added to the aggregation.The retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/preserve" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "description" : "A PCDM collection can be preserved. The collection is sent to preservation for preparation of an AIP. The AIP is created and returned to the Arkivum system for long-term preservation and storage. The AIP generated contains the files, file metadata (Dublin Core and custom), checksums and the file formats to be used.",
        "operationId" : "preserve",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The collection_id (PCDM collection identifier).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "The unique name of the data pool where the preserved package is ingested.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jobTag",
          "in" : "query",
          "description" : "A tag to give the preservation job",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Preservation request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/preserve" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "description" : "A PCDM collection can be preserved. The collection is sent to preservation for preparation of an AIP. The AIP is created and returned to the Arkivum system for long-term preservation and storage. The AIP generated contains the files, file metadata (Dublin Core and custom), checksums and the file formats to be used.",
        "operationId" : "preserve_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The collection_id (PCDM collection identifier).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datapool",
          "in" : "query",
          "description" : "The unique name of the data pool where the preserved package is ingested.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jobTag",
          "in" : "query",
          "description" : "A tag to give the preservation job",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Preservation request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/link" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a child link between the parent and child aggregations. The parent and child UUIDs must be specified, must exist and cannot be the same.",
        "operationId" : "link",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. The aggregation must have been created beforehand.The endpoint ID cannot be a file type and must not be the same as any of the link IDs.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default value is false (process the rest of the items even if one fails). Set to true if you need to abort the operation if any errors are encountered.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "childIds" ],
                "type" : "string",
                "description" : "List of unique identifiers to be linked to the aggregation. These aggregations must be created beforehand.These aggregations must be created beforehandThe retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/link" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a child link between the parent and child aggregations. The parent and child UUIDs must be specified, must exist and cannot be the same.",
        "operationId" : "link_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. The aggregation must have been created beforehand.The endpoint ID cannot be a file type and must not be the same as any of the link IDs.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default value is false (process the rest of the items even if one fails). Set to true if you need to abort the operation if any errors are encountered.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "childIds" ],
                "type" : "string",
                "description" : "List of unique identifiers to be linked to the aggregation. These aggregations must be created beforehand.These aggregations must be created beforehandThe retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/hold" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new hold on an object or collection.",
        "operationId" : "addHold",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HoldRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HoldResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to create hold on Aggregation <aggregation id>.   Failed to update audit table on adding hold <hold_id> to aggregation <aggregation id>. ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot add Hold to Aggregation. No entity with id <aggregation id> exists.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Please provide a reason for adding the hold.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/hold" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new hold on an object or collection.",
        "operationId" : "addHold_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HoldRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HoldResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to create hold on Aggregation <aggregation id>.   Failed to update audit table on adding hold <hold_id> to aggregation <aggregation id>. ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot add Hold to Aggregation. No entity with id <aggregation id> exists.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Please provide a reason for adding the hold.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/detachAll" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Detaches all existing aggregations from the parent collection.",
        "operationId" : "detachAll",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parent aggregation UUID. Parent UUID must exist",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default is false (process the rest of the items even if one fails). Set this to true if you need to abort the operation if any errors are encountered",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/detachAll" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Detaches all existing aggregations from the parent collection.",
        "operationId" : "detachAll_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parent aggregation UUID. Parent UUID must exist",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default is false (process the rest of the items even if one fails). Set this to true if you need to abort the operation if any errors are encountered",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/detach" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Detaches specific child aggregations from the parent aggregation.",
        "operationId" : "detachObjects",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parent aggregation UUID. Parent and child UUIDs must be provided, must exist and cannot be the same.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default is false (process the rest of the items even if one fails). Set this to true if you need to abort the operation if any errors are encountered.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "detachList" ],
                "type" : "string",
                "description" : "List of unique identifiers to be detached from the aggregation. These must be already linked to the aggregationThe retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Parent aggregation can't be of type file;   detachList is required;   None of the child aggregations exist",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Parent aggregation doesn't exist: <parent id>",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/detach" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Detaches specific child aggregations from the parent aggregation.",
        "operationId" : "detachObjects_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Parent aggregation UUID. Parent and child UUIDs must be provided, must exist and cannot be the same.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "abortOnError",
          "in" : "query",
          "description" : "Whether to proceed if you encounter an error processing one item. The default is false (process the rest of the items even if one fails). Set this to true if you need to abort the operation if any errors are encountered.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "detachList" ],
                "type" : "string",
                "description" : "List of unique identifiers to be detached from the aggregation. These must be already linked to the aggregationThe retention schedule must already exist."
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AggregationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Parent aggregation can't be of type file;   detachList is required;   None of the child aggregations exist",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Parent aggregation doesn't exist: <parent id>",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/parent" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new aggregation which becomes the parent of the specified aggregations.",
        "operationId" : "createParent",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAggregationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error. This error is returned if there are any application errors.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Mandatory parameter missing: aggregationType",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successfully created parent of the entity",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateParentResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "These children don't exist: [file_1]",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/parent" : {
      "post" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Creates a new aggregation which becomes the parent of the specified aggregations.",
        "operationId" : "createParent_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAggregationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error. This error is returned if there are any application errors.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Mandatory parameter missing: aggregationType",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successfully created parent of the entity",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateParentResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "These children don't exist: [file_1]",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/deletion/report" : {
      "post" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletion report for filter criteria",
        "operationId" : "getDeletionReportList",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterCriteria"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoDeletionRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/files" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists details of the root directory",
        "operationId" : "getRootFolderInfo",
        "responses" : {
          "400" : {
            "description" : "{filePath} is not a directory",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Access denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Allows you to upload a file to the virtual file-system",
        "operationId" : "createResource",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path to which the file has to be ingested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultiRequest"
              }
            },
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ingest"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/files/**" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_UNRESTRICTED_READ_USER",
        "description" : "Downloads the contents of a file (or a part of a file) from the virtual file-system / Allows you to list the details of a directory within the virtual file-system",
        "operationId" : "getResource",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path of the file that is to be downloaded / Virtual Path to the directory that is to be listed",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "async",
          "in" : "query",
          "description" : "If this is set to true your request may be accepted and a download link will be sent to you when the file is ready for download",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Client Errors",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Errors",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Access denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Allows you to upload a file to the virtual file-system",
        "operationId" : "createResource_1",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path to which the file has to be ingested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultiRequest"
              }
            },
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ingest"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/v1.0/files" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists details of the root directory",
        "operationId" : "getRootFolderInfo_1",
        "responses" : {
          "400" : {
            "description" : "{filePath} is not a directory",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Access denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Allows you to upload a file to the virtual file-system",
        "operationId" : "createResource_2",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path to which the file has to be ingested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultiRequest"
              }
            },
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ingest"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/v1.0/files/**" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_UNRESTRICTED_READ_USER",
        "description" : "Downloads the contents of a file (or a part of a file) from the virtual file-system / Allows you to list the details of a directory within the virtual file-system",
        "operationId" : "getResource_1",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path of the file that is to be downloaded / Virtual Path to the directory that is to be listed",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "async",
          "in" : "query",
          "description" : "If this is set to true your request may be accepted and a download link will be sent to you when the file is ready for download",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Client Errors",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Errors",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Access denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Allows you to upload a file to the virtual file-system",
        "operationId" : "createResource_3",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "Virtual path to which the file has to be ingested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultiRequest"
              }
            },
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ingest"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/{datapoolName}" : {
      "patch" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Update authorised fields in a datapool. Only the datapool size, ideal package size, ideal file count, package interval and max payload file size can be updated.",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "datapoolName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatapoolPatch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated authorised fields in a datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "500" : {
            "description" : "Cannot update datapool. Datapool size can only be increased. Original datapool size: {original size}, inputted datapool size: {new size}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/{datapoolName}" : {
      "patch" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Update authorised fields in a datapool. Only the datapool size, ideal package size, ideal file count, package interval and max payload file size can be updated.",
        "operationId" : "update_1",
        "parameters" : [ {
          "name" : "datapoolName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatapoolPatch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated authorised fields in a datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Datapool"
                }
              }
            }
          },
          "500" : {
            "description" : "Cannot update datapool. Datapool size can only be increased. Original datapool size: {original size}, inputted datapool size: {new size}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/system/config" : {
      "get" : {
        "tags" : [ "system-config-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get the cleanup config for either the import or export bucket.",
        "operationId" : "getSystemConfig",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemConfig"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stream" : {
      "get" : {
        "tags" : [ "file-streaming-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Returns data representing a stored document",
        "operationId" : "stream",
        "parameters" : [ {
          "name" : "externalId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/throughput" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the throughput of data through the system for the last 7 days.\nThe scale denotes the unit of 'data'.",
        "operationId" : "getThroughputStatistics",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/v1.0/throughput" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the throughput of data through the system for the last 7 days.\nThe scale denotes the unit of 'data'.",
        "operationId" : "getThroughputStatistics_1",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/dashboard/processing" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns any ongoing file processing activities in the system and their states. If you don't supply the data pool name, the API returns the overall processing stats across all the data pools within the corresponding tenant.",
        "operationId" : "getDashboardProcessingStats",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/v1.0/dashboard/processing" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns any ongoing file processing activities in the system and their states. If you don't supply the data pool name, the API returns the overall processing stats across all the data pools within the corresponding tenant.",
        "operationId" : "getDashboardProcessingStats_1",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/dashboard" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the total size (in bytes) of \"files\", \"normalised files\", \"metadata\", and \"Audit Trail\" across locations. It returns the data across all locations if the user who invokes this API have access to all data pools, otherwise the data for the default data pool for their role is returned.",
        "operationId" : "getDashboardStats",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/stats/v1.0/dashboard" : {
      "get" : {
        "tags" : [ "stats-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the total size (in bytes) of \"files\", \"normalised files\", \"metadata\", and \"Audit Trail\" across locations. It returns the data across all locations if the user who invokes this API have access to all data pools, otherwise the data for the default data pool for their role is returned.",
        "operationId" : "getDashboardStats_1",
        "parameters" : [ {
          "name" : "datapool",
          "in" : "query",
          "description" : "Unique name for the data pool",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/schema" : {
      "get" : {
        "tags" : [ "schema-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Retrieve a list of schemas",
        "operationId" : "getSchemas",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Schema"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/schema/{id}" : {
      "get" : {
        "tags" : [ "schema-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Retrieve a schema with a given id",
        "operationId" : "getSchema",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Id of the schema",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/type/{type}/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get all retention schedules for a specific type",
        "operationId" : "getTypeOrNull",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "page",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0/type/{type}/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get all retention schedules for a specific type",
        "operationId" : "getTypeOrNull_1",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          }
        }, {
          "name" : "page",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/records/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Gets a page of retention schedules",
        "operationId" : "getAllRecords_2",
        "parameters" : [ {
          "name" : "page",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0/records/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Gets a page of retention schedules",
        "operationId" : "getAllRecords_3",
        "parameters" : [ {
          "name" : "page",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoRetention"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/labels" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get UI labels for retention schedules",
        "operationId" : "getLabels",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/retention/v1.0/labels" : {
      "get" : {
        "tags" : [ "retention-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get UI labels for retention schedules",
        "operationId" : "getLabels_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/relation/kinds" : {
      "get" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get list of possible Relation Kinds",
        "operationId" : "getRelationKinds",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RelationKind"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/relation/grouped" : {
      "get" : {
        "tags" : [ "relation-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Get a list of grouped relations given an externalId",
        "operationId" : "getGroupedRelationsByExternalId",
        "parameters" : [ {
          "name" : "externalId",
          "in" : "query",
          "description" : "The externalId to get relations for",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Relation"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/queries/{id}" : {
      "get" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Get a saved query given its ID.",
        "operationId" : "getSavedSearchQueryById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the query to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavedSearchQuery"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Delete a saved search query with a given id.",
        "operationId" : "deleteSavedQuery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the saved query to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/queries/report" : {
      "get" : {
        "tags" : [ "saved-queries-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Get all saved search queries for a user.",
        "operationId" : "getSavedSearchQueries",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoSavedSearchQuery"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{token}/deletion/report/valid" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Returns the validity of the deletion report",
        "operationId" : "getDeletionReportValidity",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Token id for which the deletion report which was returned from the request",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{token}/deletion/report/members" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Downloads the members deletion report",
        "operationId" : "downloadDeleteReportMembers",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Token id for which the deletion report which was returned from the request",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{token}/deletion/report/errors" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Downloads the errors deletion report",
        "operationId" : "downloadDeleteReportErrors",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Token id for which the deletion report which was returned from the request",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No errors present in deletion request",
            "content" : {
              "application/json; charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{token}/deletion/report/duplicates" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Downloads the duplicates deletion report",
        "operationId" : "downloadDeleteReportDuplicates",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Token id for which the deletion report which was returned from the request",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No duplicates file present in deletion request",
            "content" : {
              "application/json; charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DuplicateFiles"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{id}/deletion/request" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Generates the deletion report",
        "operationId" : "requestDeleteReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id for which the deletion report is to be generated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "executionId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/objects/labels" : {
      "get" : {
        "tags" : [ "file-wizard-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Returns a list of labels describing how objects should be displayed to the user on the UI",
        "operationId" : "getLabels_2",
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/metadata/namespace/config/{id}" : {
      "get" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get a Metadata Namespace Configuration",
        "operationId" : "getOne",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Uri of the MetadataNamespaceConfig",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataNamespaceConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "No MetadataNamespaceConfig with Id {id}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal error occurred",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/metadata/namespace/config/prefix" : {
      "get" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get a Metadata Namespace Configuration",
        "operationId" : "getByPrefix",
        "parameters" : [ {
          "name" : "prefix",
          "in" : "query",
          "description" : "Uri of the MetadataNamespaceConfig",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataNamespaceConfig"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal error occurred",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "No MetadataNamespaceConfig with prefix {prefix}",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/metadata/namespace/config/labels" : {
      "get" : {
        "tags" : [ "metadata-namespace-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get Metadata Namespace Configuration Labels",
        "operationId" : "getLabels_3",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/locations" : {
      "get" : {
        "tags" : [ "file-wizard-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Get a list of locations to browse. A location is typically a bucket in AWS S3 of Google cloud storage which is used as a staging area for getting data into the system (ingest) or out of the system (export)",
        "operationId" : "getLocations",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the ingest location - INGEST or EXPORT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FileWizardLocation"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location" : {
      "get" : {
        "tags" : [ "location-controller" ],
        "operationId" : "getLocations_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LocationRecord"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location/{locationId}/objects" : {
      "get" : {
        "tags" : [ "file-wizard-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "List Blobs or Folders that are found in the specified location.",
        "operationId" : "getObjects",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "Limits the response to objects whose keys begin with the specified prefix",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "marker",
          "in" : "query",
          "description" : "A marker that can be used to request the next page of results following on from a previous page",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The maximum number of objects to return in the response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 1000
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileWizardObjectResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location/{locationId}/objects/metadata" : {
      "get" : {
        "tags" : [ "file-wizard-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "List Blobs that match the systems configured metadata file names. Typical values are: ark-file-meta.csv, metadata.xml, metadata.csv and ark-manifest.json",
        "operationId" : "getMetadataObjects",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "Limits the response to objects whose keys begin with the specified prefix",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileWizardObjectResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location/set" : {
      "get" : {
        "tags" : [ "location-controller" ],
        "operationId" : "getAllLocationSet",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UILocationSet"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location/set/{locationSetId}" : {
      "get" : {
        "tags" : [ "location-controller" ],
        "operationId" : "getLocationSet",
        "parameters" : [ {
          "name" : "locationSetId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LocationRecord"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/location/labels" : {
      "get" : {
        "tags" : [ "location-controller" ],
        "operationId" : "getLocationsLabels",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/job/tag" : {
      "get" : {
        "tags" : [ "job-report-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Track the status of jobs related to a specific job tag",
        "operationId" : "getJobByTag",
        "parameters" : [ {
          "name" : "jobTag",
          "in" : "query",
          "description" : "Job tag used to link related jobs",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/job/tag/report/summary" : {
      "get" : {
        "tags" : [ "job-report-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Retrieve the summary of the status of jobs related to a specific job tag",
        "operationId" : "getIngestReportSummaryTag",
        "parameters" : [ {
          "name" : "jobTag",
          "in" : "query",
          "description" : "Job tag used to link related jobs",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobSummary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/job/report/summary" : {
      "get" : {
        "tags" : [ "job-report-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Retrieve the summary of the status of a job related to a specific job id",
        "operationId" : "getIngestReportSummary",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "Job id used to link related jobs",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobSummary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/job/id" : {
      "get" : {
        "tags" : [ "job-report-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Track the status of a job related to a specific job id",
        "operationId" : "getJobById",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "Job id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/job/children" : {
      "get" : {
        "tags" : [ "job-report-controller" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Return a list of jobs that are the children of the supplied parent job",
        "operationId" : "getChildrenJobs",
        "parameters" : [ {
          "name" : "parentId",
          "in" : "query",
          "description" : "Job ID of the parent",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoJob"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest/{ingestId}" : {
      "get" : {
        "tags" : [ "Ingest" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Ingest status. Get the overall status of the ingest.",
        "operationId" : "getIngest",
        "parameters" : [ {
          "name" : "ingestId",
          "in" : "path",
          "description" : "The identifier of the ingest job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest/{ingestId}/report" : {
      "get" : {
        "tags" : [ "Ingest" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Track the status of an Ingest",
        "operationId" : "getIngestReport",
        "parameters" : [ {
          "name" : "ingestId",
          "in" : "path",
          "description" : "Unique identifier for the ingest",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntityProcessingState"
                }
              }
            }
          },
          "401" : {
            "description" : "Resource not found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest/{ingestId}/report/summary" : {
      "get" : {
        "tags" : [ "Ingest" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Retrieve the summary of the status of an Ingest",
        "operationId" : "getIngestReportSummary_1",
        "parameters" : [ {
          "name" : "ingestId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobSummary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest/splitter/default" : {
      "get" : {
        "tags" : [ "Ingest" ],
        "summary" : "ROLE: ROLE_USER",
        "description" : "Retrieve the default splitter value for preserved ingests",
        "operationId" : "getDefaultSplitterValue",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ingest/download/{ingestId}" : {
      "get" : {
        "tags" : [ "Ingest" ],
        "operationId" : "downloadIngestInventory",
        "parameters" : [ {
          "name" : "ingestId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "text/csv; charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/{exportId}" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export status. Get the overall status of the export.",
        "operationId" : "getExport",
        "parameters" : [ {
          "name" : "exportId",
          "in" : "path",
          "description" : "The identifier of the export job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export status request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/export/v1.0/{exportId}" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "ROLE: ROLE_SUPERUSER",
        "description" : "Export status. Get the overall status of the export.",
        "operationId" : "getExport_1",
        "parameters" : [ {
          "name" : "exportId",
          "in" : "path",
          "description" : "The identifier of the export job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "The requested resource cannot be found. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is in error in some way e.g. bad parameter. The errorMessage will give more detail",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Export status request accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportRecord"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/user/dashboard" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the ordered list of datapools to which the logged in user has access, including 'Overall' if applicable",
        "operationId" : "getDashboardDatapoolList",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "$ref" : "#/components/schemas/Datapool"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/user/dashboard" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the ordered list of datapools to which the logged in user has access, including 'Overall' if applicable",
        "operationId" : "getDashboardDatapoolList_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "$ref" : "#/components/schemas/Datapool"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/labels" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists the labels for the datapool report",
        "operationId" : "getDatapoolLabels",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/labels" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Lists the labels for the datapool report",
        "operationId" : "getDatapoolLabels_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/exportKeys" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_KEY_ADMIN",
        "description" : "Exports  the datapool keys",
        "operationId" : "exportKeys",
        "responses" : {
          "500" : {
            "description" : "IO Exception",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No data pools are available for the currently logged in user",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "302" : {
            "description" : "Datapool keys exported",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/exportKeys" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_KEY_ADMIN",
        "description" : "Exports  the datapool keys",
        "operationId" : "exportKeys_1",
        "responses" : {
          "500" : {
            "description" : "IO Exception",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No data pools are available for the currently logged in user",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "302" : {
            "description" : "Datapool keys exported",
            "content" : {
              "application/zip; charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/dashboard/landing" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the name and ID of the users landing datapool, will be 'Overall' if applicable",
        "operationId" : "getLandingDatapool",
        "responses" : {
          "302" : {
            "description" : "Datapool found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "401" : {
            "description" : "Access Denied, user doesn't have datapool access",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Could not encode dashboard path",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/dashboard/landing" : {
      "get" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Returns the name and ID of the users landing datapool, will be 'Overall' if applicable",
        "operationId" : "getLandingDatapool_1",
        "responses" : {
          "302" : {
            "description" : "Datapool found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "401" : {
            "description" : "Access Denied, user doesn't have datapool access",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Could not encode dashboard path",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/retentions/removable" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Returns a list of retention ids that can be removed from a PCDM aggregation",
        "operationId" : "removableRetentions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/retentions/removable" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Returns a list of retention ids that can be removed from a PCDM aggregation",
        "operationId" : "removableRetentions_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/retentions/available" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Returns a list of retention ids that are available to be applied to a PCDDM aggregation",
        "operationId" : "availableRetentions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/retentions/available" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Returns a list of retention ids that are available to be applied to a PCDDM aggregation",
        "operationId" : "availableRetentions_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/children/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_READONLYUSER",
        "description" : "Returns the list of child entities of an aggregations",
        "operationId" : "readChildren",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "path",
          "description" : "Number of pages to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "description" : "Number of items in a page (default is 1000).",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/children/{page}/{pageSize}" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_READONLYUSER",
        "description" : "Returns the list of child entities of an aggregations",
        "operationId" : "readChildren_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "path",
          "description" : "Number of pages to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "path",
          "description" : "Number of items in a page (default is 1000).",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDtoBaseEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_READONLYUSER",
        "description" : "Reads an aggregation",
        "operationId" : "read_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id. The ID must be URL encoded for the request to work.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "Cannot read Retention. No retention with id <retention id> exists;    Can't read Aggregation. No entity with id <id> exists",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}" : {
      "get" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_READONLYUSER",
        "description" : "Reads an aggregation",
        "operationId" : "read_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation id. The ID must be URL encoded for the request to work.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "Cannot read Retention. No retention with id <retention id> exists;    Can't read Aggregation. No entity with id <id> exists",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/deletion/labels" : {
      "get" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletion report labels",
        "operationId" : "getLabels_4",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Field"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/api/2/files/fileInfo/**" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Gets the detailed file information for a single file from within the virtual file-system",
        "operationId" : "getFileInfo",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "File path whose propertiea are to be returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Access Denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileProperties"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/a6/v1.0/api/2/files/fileInfo/**" : {
      "get" : {
        "tags" : [ "file-controller" ],
        "summary" : "ROLE: ROLE_READONLYUSER",
        "description" : "Gets the detailed file information for a single file from within the virtual file-system",
        "operationId" : "getFileInfo_1",
        "parameters" : [ {
          "name" : "filePath",
          "in" : "path",
          "description" : "File path whose propertiea are to be returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Access Denied",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileProperties"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/ops/aggregation/{token}" : {
      "delete" : {
        "tags" : [ "deletion-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletes an existing entity and associated entities",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Token provided when requesting the deletion report",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Entity accepted for deletion",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "empty" : {
                      "type" : "boolean"
                    }
                  },
                  "additionalProperties" : {
                    "type" : "object"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/{name}" : {
      "delete" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletes an empty datapool",
        "operationId" : "delete_2",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}; Failed to delete {path}: path doesn't exist; Directory is not empty",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "Datapool deleted"
          },
          "500" : {
            "description" : "Cannot delete default datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/datapool/v1.0/{name}" : {
      "delete" : {
        "tags" : [ "datapool-controller" ],
        "summary" : "ROLE: ROLE_ADMIN",
        "description" : "Deletes an empty datapool",
        "operationId" : "delete_3",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "Datapool doesn't exist: {datapool name}; Failed to delete {path}: path doesn't exist; Directory is not empty",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "Datapool deleted"
          },
          "500" : {
            "description" : "Cannot delete default datapool",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/{id}/hold/{holdId}" : {
      "delete" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Removes an existing hold on an aggregation.",
        "operationId" : "deleteHold",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "holdId",
          "in" : "path",
          "description" : "Hold ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HoldRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot remove Hold from Aggregation. No entity with id <aggregation id> exists. ;    Cannot remove Hold from Aggregation. No hold with id <hold id> exists.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Please provide a reason for deleting the hold.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to remove hold from the database. ;    Failed to update audit table on removing hold <hold_id> from aggregation <aggregation id>. ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    },
    "/aggregation/v1.0/{id}/hold/{holdId}" : {
      "delete" : {
        "tags" : [ "aggregation-controller" ],
        "summary" : "ROLE_USER",
        "description" : "Removes an existing hold on an aggregation.",
        "operationId" : "deleteHold_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Aggregation UUID. This is an alphanumeric identifier (no spaces or special characters).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "holdId",
          "in" : "path",
          "description" : "Hold ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HoldRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BaseEntity"
                  }, {
                    "$ref" : "#/components/schemas/FileEntity"
                  }, {
                    "$ref" : "#/components/schemas/PcdmCollection"
                  }, {
                    "$ref" : "#/components/schemas/PcdmObject"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot remove Hold from Aggregation. No entity with id <aggregation id> exists. ;    Cannot remove Hold from Aggregation. No hold with id <hold id> exists.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Please provide a reason for deleting the hold.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Failed to remove hold from the database. ;    Failed to update audit table on removing hold <hold_id> from aggregation <aggregation id>. ",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "AggregationCategory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Retention" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "duration" : {
            "type" : "integer",
            "format" : "int32"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          },
          "days" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reason" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "delete", "export", "review" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          },
          "category" : {
            "$ref" : "#/components/schemas/AggregationCategory"
          },
          "default" : {
            "$ref" : "#/components/schemas/Retention"
          }
        }
      },
      "ObjectId" : {
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "integer",
            "format" : "int32"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Relation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "sourceEntityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "destinationEntityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "sourceExternalId" : {
            "type" : "string"
          },
          "destinationExternalId" : {
            "type" : "string"
          },
          "kind" : {
            "type" : "string"
          }
        }
      },
      "RelationKind" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "kind" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "systemDefined" : {
            "type" : "boolean"
          }
        }
      },
      "SavedSearchQuery" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "queryName" : {
            "type" : "string"
          },
          "lastModified" : {
            "type" : "string",
            "format" : "date-time"
          },
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "C", "O", "F", "D" ]
            }
          },
          "datapools" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sort" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "fileClass" : {
            "type" : "string",
            "enum" : [ "REGULAR", "PRESERVATION" ]
          },
          "query" : {
            "type" : "string"
          }
        }
      },
      "Datapool" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "name" : {
            "type" : "string"
          },
          "quota" : {
            "type" : "integer",
            "format" : "int64"
          },
          "idealPkgSize" : {
            "type" : "integer",
            "format" : "int64"
          },
          "idealFileCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ingestInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "packageInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxPayloadFileSize" : {
            "type" : "integer",
            "format" : "int64"
          },
          "path" : {
            "type" : "string"
          },
          "key" : {
            "$ref" : "#/components/schemas/Keystore"
          },
          "lastPackage" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastIndex" : {
            "type" : "string",
            "format" : "date-time"
          },
          "encrypted" : {
            "type" : "boolean"
          },
          "preserved" : {
            "type" : "boolean"
          },
          "geteSignatures" : {
            "type" : "string",
            "enum" : [ "NONE", "ON_INGEST_METADATA", "ON_INGEST_WORKFLOW" ]
          },
          "atomEnabled" : {
            "type" : "boolean"
          },
          "metadataNamespaceUri" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "locationSetId" : {
            "type" : "string"
          }
        }
      },
      "Keystore" : {
        "type" : "object",
        "properties" : {
          "md5" : {
            "type" : "string"
          },
          "publicData" : {
            "type" : "string"
          },
          "privateData" : {
            "type" : "string"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string"
          },
          "errorDetails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ClearLocationConfig" : {
        "type" : "object",
        "properties" : {
          "clearIngestLocation" : {
            "type" : "boolean"
          },
          "clearExportLocationDuration" : {
            "type" : "string"
          }
        }
      },
      "SystemConfig" : {
        "type" : "object",
        "properties" : {
          "clearLocationConfigMap" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ClearLocationConfig"
            }
          },
          "archivematicaTag" : {
            "type" : "string"
          },
          "auditDownloadRowLimit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dedicatedArchivematica" : {
            "type" : "boolean"
          },
          "maxSplitterJobs" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EffectiveRetention" : {
        "type" : "object",
        "properties" : {
          "retentionId" : {
            "type" : "string"
          },
          "retentionEndDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startAggregation" : {
            "type" : "string"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "delete", "export", "review" ]
          },
          "isStartAggregation" : {
            "type" : "boolean"
          },
          "notified" : {
            "type" : "boolean"
          }
        },
        "description" : "The set of retentions for this entity"
      },
      "EntityTreeView" : {
        "type" : "object",
        "properties" : {
          "externalId" : {
            "type" : "string",
            "description" : "An identifier of the entity"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display Name of the entity"
          },
          "type" : {
            "type" : "string",
            "description" : "The entity type",
            "enum" : [ "C", "O", "F", "D" ]
          },
          "parents" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of externalIds of the parents of this entity",
            "items" : {
              "type" : "string",
              "description" : "List of externalIds of the parents of this entity"
            }
          },
          "effectiveRetentions" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "The set of retentions for this entity",
            "items" : {
              "$ref" : "#/components/schemas/EffectiveRetention"
            }
          },
          "holds" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "The set of holds for this entity",
            "items" : {
              "$ref" : "#/components/schemas/Hold"
            }
          },
          "hasChildren" : {
            "type" : "boolean",
            "description" : "Whether this entity has any children that can be further expanded within the tree"
          },
          "hasRelations" : {
            "type" : "boolean",
            "description" : "Whether this entity has any relations"
          }
        }
      },
      "Hold" : {
        "required" : [ "reason" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "reason" : {
            "type" : "string",
            "description" : "A human readable justification for the hold being placed or deleted"
          },
          "isActive" : {
            "type" : "boolean"
          },
          "startAggregateId" : {
            "type" : "string"
          },
          "startType" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          },
          "reasonUnheld" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdUser" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "The set of holds for this entity"
      },
      "Constraint" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "The field name where the filter has to be applied"
          },
          "value" : {
            "type" : "string",
            "description" : "Value to compare to"
          },
          "value2" : {
            "type" : "string",
            "description" : "Value to compare to. To be passed when the operator is inrange (between)"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "equals", "notEqual", "contains", "notContains", "startsWith", "endsWith", "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual", "inRange" ]
          }
        }
      },
      "FilterCriteria" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "constraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constraint"
            }
          },
          "sort" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SortCriteria"
            }
          }
        }
      },
      "SortCriteria" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The field name to sort by"
          },
          "orderBy" : {
            "type" : "string",
            "description" : "Whether to sort in ascending or descending order.",
            "enum" : [ "asc", "desc" ]
          }
        }
      },
      "ResultListDtoRetention" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Retention"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CustomMetadataField" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "xmlType" : {
            "type" : "string",
            "enum" : [ "BOOLEAN", "BOOLEAN_ARR", "INT", "INT_ARR", "LONG", "LONG_ARR", "DOUBLE", "DOUBLE_ARR", "STRING", "STRING_ARR", "DATE", "DATE_ARR", "DATE_TIME", "DATE_TIME_ARR" ]
          },
          "isSensitive" : {
            "type" : "boolean"
          },
          "isPersonal" : {
            "type" : "boolean"
          },
          "displayOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "multiple" : {
            "type" : "boolean"
          },
          "isMandatory" : {
            "type" : "boolean"
          },
          "editable" : {
            "type" : "boolean"
          }
        }
      },
      "MetadataNamespaceConfig" : {
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string"
          },
          "prefix" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "editable" : {
            "type" : "boolean"
          },
          "isMandatory" : {
            "type" : "boolean"
          },
          "grouped" : {
            "type" : "boolean"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomMetadataField"
            }
          },
          "aggregationTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "C", "O", "F", "D" ]
            }
          }
        },
        "description" : "The MetadataNamespaceConfig"
      },
      "BaseEntityProcessingState" : {
        "type" : "object",
        "properties" : {
          "entityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "aggregationType" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          },
          "processingSteps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessingStep"
            }
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "contentEntityProcessingState" : {
            "$ref" : "#/components/schemas/ContentEntityProcessingState"
          },
          "fieldBindings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FieldBinding"
              }
            }
          },
          "incompleteMetadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "fileProcessingLogIDs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileProcessingLogIDs"
            }
          },
          "ingestPath" : {
            "type" : "string"
          },
          "relativePath" : {
            "type" : "string"
          },
          "md5" : {
            "type" : "string"
          },
          "sha256" : {
            "type" : "string"
          },
          "sha512" : {
            "type" : "string"
          },
          "adler32" : {
            "type" : "string"
          },
          "archivePath" : {
            "type" : "string"
          },
          "dedupOriginalContentEntityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "dedupRedundantContentEntityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "dedupRedundantContentEntityProcessingStateId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "externalDedup" : {
            "type" : "boolean"
          },
          "linkParents" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectId"
            }
          },
          "detachParents" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectId"
            }
          },
          "unpackDetails" : {
            "$ref" : "#/components/schemas/UnpackDetails"
          },
          "uuid" : {
            "type" : "string"
          },
          "objectId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "ContentEntityProcessingState" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "contentEntityId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "processingSteps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessingStep"
            }
          },
          "locationProcessingSteps" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProcessingStep"
              }
            }
          },
          "sha256" : {
            "type" : "string",
            "description" : "Sha256 Checksum of the content"
          },
          "sha512" : {
            "type" : "string",
            "description" : "Sha512 Checksum of the content"
          },
          "md5" : {
            "type" : "string",
            "description" : "MD5 Checksum of the content"
          },
          "adler32" : {
            "type" : "string",
            "description" : "Adler32 Checksum of the content"
          },
          "datapoolName" : {
            "type" : "string",
            "description" : "Name of the datapool where the content belongs to"
          },
          "jobRequests" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectId"
            }
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "FieldBinding" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "valuePathExpression" : {
            "type" : "string"
          },
          "xmlNamespaces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/XmlNamespace"
            }
          }
        }
      },
      "FileProcessingLogIDs" : {
        "type" : "object",
        "properties" : {
          "step" : {
            "type" : "string",
            "enum" : [ "FIXITY", "METADATA_PROCESSING", "ENCRYPTION", "INDEXING", "PRESERVATION_SCHEDULED", "PRESERVATION", "DIP_PROCESSING", "VIRUS_SCAN", "CACHING", "METADATA_EXTRACTION", "REPLICATION", "EXPORT", "UNPACKING", "INTEGRITY_CHECK", "SCHEDULED_FIXITY", "DB_ENTITY_DELETE", "CONTENT_ENTITY_DELETE", "SIP_PROCESSING", "AIP_PROCESSING", "RESTORATION", "REPLICATION_COPY", "FIELD_BINDING", "METADATA_EXPORT", "BAGIT_METADATA", "EXPORT_CONCURRENCY", "METADATA_VALIDATION", "METADATA_GENERATION", "DEDUPLICATION", "SIP_EXPORT_FILES", "ENTITY_LINK", "ENTITY_DETACH", "INHERIT_TOWARDS_PCDM_LEAVES", "INHERIT_TOWARDS_PCDM_ROOT", "CHILD_JOB", "INHERIT_RETENTIONS", "INHERIT_HOLDS" ]
          },
          "fileProcessingId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "ProcessingStep" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "REQUESTED", "REQUESTING", "PROCESSING", "RETRY", "SCHEDULED", "SUCCESS", "ERROR" ]
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Error message if a processing step fails"
          },
          "retryCount" : {
            "type" : "integer",
            "description" : "Number of retry attempts",
            "format" : "int32"
          },
          "tryAgainAfter" : {
            "type" : "object",
            "properties" : {
              "seconds" : {
                "type" : "integer",
                "format" : "int64"
              },
              "units" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "timeBased" : {
                      "type" : "boolean"
                    },
                    "dateBased" : {
                      "type" : "boolean"
                    },
                    "durationEstimated" : {
                      "type" : "boolean"
                    },
                    "duration" : {
                      "type" : "object",
                      "properties" : {
                        "seconds" : {
                          "type" : "integer",
                          "format" : "int64"
                        },
                        "nano" : {
                          "type" : "integer",
                          "format" : "int32"
                        },
                        "zero" : {
                          "type" : "boolean"
                        },
                        "negative" : {
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                }
              },
              "nano" : {
                "type" : "integer",
                "format" : "int32"
              },
              "zero" : {
                "type" : "boolean"
              },
              "negative" : {
                "type" : "boolean"
              }
            },
            "description" : "Time at which to try the processing step again"
          },
          "millisTaken" : {
            "type" : "integer",
            "description" : "How long the step took to complete in milliseconds",
            "format" : "int64"
          },
          "stepVersion" : {
            "type" : "integer",
            "description" : "The version of the step - ensure exactly once semantics on step processing",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "enum" : [ "FIXITY", "METADATA_PROCESSING", "ENCRYPTION", "INDEXING", "PRESERVATION_SCHEDULED", "PRESERVATION", "DIP_PROCESSING", "VIRUS_SCAN", "CACHING", "METADATA_EXTRACTION", "REPLICATION", "EXPORT", "UNPACKING", "INTEGRITY_CHECK", "SCHEDULED_FIXITY", "DB_ENTITY_DELETE", "CONTENT_ENTITY_DELETE", "SIP_PROCESSING", "AIP_PROCESSING", "RESTORATION", "REPLICATION_COPY", "FIELD_BINDING", "METADATA_EXPORT", "BAGIT_METADATA", "EXPORT_CONCURRENCY", "METADATA_VALIDATION", "METADATA_GENERATION", "DEDUPLICATION", "SIP_EXPORT_FILES", "ENTITY_LINK", "ENTITY_DETACH", "INHERIT_TOWARDS_PCDM_LEAVES", "INHERIT_TOWARDS_PCDM_ROOT", "CHILD_JOB", "INHERIT_RETENTIONS", "INHERIT_HOLDS" ]
          },
          "modifiedTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "Date time in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          }
        }
      },
      "ResultListDtoBaseEntityProcessingState" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BaseEntityProcessingState"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "UnpackDetails" : {
        "type" : "object",
        "properties" : {
          "warningsByFileName" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "uniqueFolderStem" : {
            "type" : "string"
          }
        }
      },
      "XmlNamespace" : {
        "type" : "object",
        "properties" : {
          "prefix" : {
            "type" : "string"
          },
          "namespaceValue" : {
            "type" : "string"
          }
        }
      },
      "Ingest" : {
        "type" : "object",
        "properties" : {
          "ingestId" : {
            "type" : "string",
            "description" : "Unique identifier for the ingest",
            "example" : "5eff15865f15030001e0b7e0"
          },
          "datapool" : {
            "type" : "string",
            "description" : "URL encoded unique name of the data pool where the files are to be ingested. All files are ingested into the root of the specified Datapool. If additional levels are desired this can be achieved via the structure of the folders within the ingest location.",
            "example" : "My%20Datapool"
          },
          "ingestPath" : {
            "type" : "string",
            "description" : "URL encoded path within the ingest location to the root folder containing the files.",
            "example" : "a%2Fb%2Fc"
          },
          "metadataPath" : {
            "type" : "string",
            "description" : "URL encoded path within the ingest location to a metadata file. The processing of the metadataPath depend on its suffix, if the ending is xml it is assumed to be in xml format. If an XSLT transform is registered for the tenant is is applied first and then processed. If the suffix is csv it is processed as a CSV metadata file",
            "example" : "a%2Fb%2Fc%2Fmetadata.xml"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "IN_PROGRESS", "PENDING", "SUCCEEDED", "FAILED", "SCHEDULED", "AWAITING_APPROVAL", "PREPARING_FAILURE" ]
          },
          "errorMessages" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Error messages of a failed ingest (status == FAILED)"
            },
            "description" : "Error messages of a failed ingest (status == FAILED)"
          },
          "collectionId" : {
            "type" : "string",
            "description" : "The identifier of the collection into which the files and metadata are ingested"
          },
          "folderPath" : {
            "type" : "string",
            "description" : "A custom folder path to be used for all files in an ingest"
          },
          "jobTag" : {
            "type" : "string",
            "description" : "A custom tag used to link related ingests"
          },
          "filename" : {
            "type" : "string"
          },
          "unpack" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether you want your archives to be unpacked during the ingest"
          },
          "locationId" : {
            "type" : "string",
            "description" : "The identifier of the location from which the files are ingested"
          },
          "isArchive" : {
            "type" : "boolean"
          }
        }
      },
      "ExportRecord" : {
        "type" : "object",
        "properties" : {
          "exportId" : {
            "type" : "string",
            "description" : "The ID of the export"
          },
          "parentExportId" : {
            "type" : "string",
            "description" : "The ID of the export"
          },
          "collectionId" : {
            "type" : "string",
            "description" : "The path of the export"
          },
          "locationId" : {
            "type" : "string",
            "description" : "The location the export with be saved in"
          },
          "exportStatus" : {
            "type" : "string",
            "description" : "The status of the export"
          },
          "exportRequestedTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The time the export occurred in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "lastModifiedTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The last updated time of the export record in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "exportError" : {
            "type" : "string",
            "description" : "The error message of a failed export"
          }
        }
      },
      "ExportRequest" : {
        "type" : "object",
        "properties" : {
          "ids" : {
            "type" : "array",
            "description" : "A list of external ids to be exported. This should only be populated for the export list API.",
            "items" : {
              "type" : "string",
              "description" : "A list of external ids to be exported. This should only be populated for the export list API."
            }
          }
        }
      },
      "AtomMetadata" : {
        "type" : "object",
        "properties" : {
          "qubitParentSlug" : {
            "type" : "string"
          },
          "donotload" : {
            "type" : "boolean"
          }
        }
      },
      "BaseEntity" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "category" : {
            "$ref" : "#/components/schemas/AggregationCategory"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "C", "O", "F", "D" ]
          },
          "holds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Hold"
            }
          },
          "retentionId" : {
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "holdId" : {
            "type" : "string"
          },
          "holdCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retentionCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ingestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "relatedAggregationId" : {
            "type" : "string"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "immutable" : {
            "type" : "boolean"
          },
          "ingestState" : {
            "type" : "string",
            "enum" : [ "IN_PROGRESS", "SUCCESS", "FAILURE" ]
          },
          "reevaluationNeeded" : {
            "type" : "boolean"
          },
          "metadataNamespaceUri" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "parentsInt" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectId"
            }
          },
          "parents" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "datapoolSet" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectId"
            }
          },
          "secureExportPending" : {
            "type" : "boolean"
          },
          "objectId" : {
            "$ref" : "#/components/schemas/ObjectId"
          },
          "id" : {
            "type" : "string"
          },
          "effectiveRetentions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EffectiveRetention"
            }
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "ESignature" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "string"
          },
          "dateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "meaning" : {
            "type" : "string"
          }
        }
      },
      "ExtractedDublinCoreMetadata" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "creator" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "subject" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "publisher" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "contributor" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "date" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "format" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "identifier" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "source" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "language" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "relation" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "coverage" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "rights" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "FileEntity" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseEntity"
        }, {
          "type" : "object",
          "properties" : {
            "directoryId" : {
              "$ref" : "#/components/schemas/ObjectId"
            },
            "contentEntityId" : {
              "$ref" : "#/components/schemas/ObjectId"
            },
            "fileClass" : {
              "type" : "string",
              "enum" : [ "REGULAR", "PRESERVATION" ]
            },
            "contentType" : {
              "type" : "string"
            },
            "fileCreatedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "fileModifiedDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "datapoolId" : {
              "$ref" : "#/components/schemas/ObjectId"
            },
            "esignatures" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ESignature"
              }
            }
          }
        } ]
      },
      "IsadgMetadata" : {
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string"
          },
          "accessionNumber" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "levelOfDescription" : {
            "type" : "string"
          },
          "extentAndMedium" : {
            "type" : "string"
          },
          "repository" : {
            "type" : "string"
          },
          "archivalHistory" : {
            "type" : "string"
          },
          "acquisition" : {
            "type" : "string"
          },
          "scopeAndContent" : {
            "type" : "string"
          },
          "appraisal" : {
            "type" : "string"
          },
          "accruals" : {
            "type" : "string"
          },
          "arrangement" : {
            "type" : "string"
          },
          "accessConditions" : {
            "type" : "string"
          },
          "reproductionConditions" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "script" : {
            "type" : "string"
          },
          "languageNote" : {
            "type" : "string"
          },
          "physicalCharacteristics" : {
            "type" : "string"
          },
          "findingAids" : {
            "type" : "string"
          },
          "locationOfOriginals" : {
            "type" : "string"
          },
          "locationOfCopies" : {
            "type" : "string"
          },
          "relatedUnitsOfDescription" : {
            "type" : "string"
          },
          "publicationNote" : {
            "type" : "string"
          },
          "digitalObjectURI" : {
            "type" : "string"
          },
          "generalNote" : {
            "type" : "string"
          },
          "subjectAccessPoints" : {
            "type" : "string"
          },
          "placeAccessPoints" : {
            "type" : "string"
          },
          "nameAccessPoints" : {
            "type" : "string"
          },
          "genreAccessPoints" : {
            "type" : "string"
          },
          "descriptionIdentifier" : {
            "type" : "string"
          },
          "institutionIdentifier" : {
            "type" : "string"
          },
          "rules" : {
            "type" : "string"
          },
          "descriptionStatus" : {
            "type" : "string"
          },
          "levelOfDetail" : {
            "type" : "string"
          },
          "revisionHistory" : {
            "type" : "string"
          },
          "languageOfDescription" : {
            "type" : "string"
          },
          "scriptOfDescription" : {
            "type" : "string"
          },
          "sources" : {
            "type" : "string"
          },
          "archivistNote" : {
            "type" : "string"
          },
          "publicationStatus" : {
            "type" : "string"
          },
          "physicalObjectName" : {
            "type" : "string"
          },
          "physicalObjectLocation" : {
            "type" : "string"
          },
          "physicalObjectType" : {
            "type" : "string"
          },
          "alternativeIdentifiers" : {
            "type" : "string"
          },
          "alternativeIdentifierLabels" : {
            "type" : "string"
          },
          "strEventDates" : {
            "type" : "string"
          },
          "eventDates" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventTypes" : {
            "type" : "string"
          },
          "strEventStartDates" : {
            "type" : "string"
          },
          "eventStartDates" : {
            "type" : "string",
            "format" : "date-time"
          },
          "strEventEndDates" : {
            "type" : "string"
          },
          "eventEndDates" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventActors" : {
            "type" : "string"
          },
          "eventActorHistories" : {
            "type" : "string"
          },
          "culture" : {
            "type" : "string"
          }
        }
      },
      "Metadata" : {
        "type" : "object",
        "properties" : {
          "extractedDublinCoreMetadata" : {
            "$ref" : "#/components/schemas/ExtractedDublinCoreMetadata"
          },
          "customMetadata" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/MetadataValue"
            },
            "writeOnly" : true
          },
          "isadgMetadata" : {
            "$ref" : "#/components/schemas/IsadgMetadata"
          },
          "atomMetadata" : {
            "$ref" : "#/components/schemas/AtomMetadata"
          },
          "namespacedMetadata" : {
            "$ref" : "#/components/schemas/MetadataNamespace"
          }
        }
      },
      "MetadataNamespace" : {
        "type" : "object",
        "properties" : {
          "namespacedMetadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/MetadataValue"
                }
              }
            }
          }
        }
      },
      "MetadataValue" : {
        "type" : "object",
        "properties" : {
          "xmlType" : {
            "type" : "string",
            "enum" : [ "BOOLEAN", "BOOLEAN_ARR", "INT", "INT_ARR", "LONG", "LONG_ARR", "DOUBLE", "DOUBLE_ARR", "STRING", "STRING_ARR", "DATE", "DATE_ARR", "DATE_TIME", "DATE_TIME_ARR" ]
          },
          "booleanValues" : {
            "type" : "array",
            "items" : {
              "type" : "boolean"
            }
          },
          "dateValues" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "doubleValues" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "numberValues" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stringValues" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PcdmCollection" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseEntity"
        }, {
          "type" : "object",
          "properties" : {
            "peers" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "PcdmObject" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseEntity"
        }, {
          "type" : "object",
          "properties" : {
            "peers" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "ResultListDtoBaseEntity" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/BaseEntity"
              }, {
                "$ref" : "#/components/schemas/FileEntity"
              }, {
                "$ref" : "#/components/schemas/PcdmCollection"
              }, {
                "$ref" : "#/components/schemas/PcdmObject"
              } ]
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CreateAggregationRequest" : {
        "required" : [ "displayName", "id", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Aggregation externalId.",
            "example" : "aggregation1"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display Name, does not have to be unique.",
            "example" : "Display Name"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Date of creation (ISO format, UTC). Generated based on the current time, unless specified as a parameter.",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "description" : "Aggregation type - collection or object",
            "example" : "C",
            "enum" : [ "C", "O", "F", "D", "C, O" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Aggregation description",
            "example" : "description"
          },
          "retentionId" : {
            "type" : "string",
            "description" : "Retention ID that maps to a retention schedule. If not added, defaults to a standard schedule. The system is deployed with a default retention up to 2218-12-31.",
            "example" : "rtn-1"
          },
          "category" : {
            "type" : "string",
            "description" : "Object/collection type, for example, PDF, email, and voice. Not in use yet.",
            "example" : "PDF"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "children" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of the aggregations to link to the new parent",
            "items" : {
              "type" : "string",
              "description" : "List of the aggregations to link to the new parent"
            }
          },
          "datapoolSchema" : {
            "type" : "string",
            "description" : "Data pool name",
            "example" : "Default"
          }
        }
      },
      "CreateChildResponse" : {
        "type" : "object",
        "properties" : {
          "child" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/BaseEntity"
            }, {
              "$ref" : "#/components/schemas/FileEntity"
            }, {
              "$ref" : "#/components/schemas/PcdmCollection"
            }, {
              "$ref" : "#/components/schemas/PcdmObject"
            } ]
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "AggregationResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResponseObject"
            }
          },
          "id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "boolean"
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "ResponseObject" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "status" : {
            "type" : "boolean"
          },
          "errorMessage" : {
            "type" : "string"
          }
        }
      },
      "HoldRequest" : {
        "required" : [ "reason" ],
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason to create or remove a hold",
            "example" : "Creating a new hold"
          }
        }
      },
      "HoldResponse" : {
        "type" : "object",
        "properties" : {
          "entity" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/BaseEntity"
            }, {
              "$ref" : "#/components/schemas/FileEntity"
            }, {
              "$ref" : "#/components/schemas/PcdmCollection"
            }, {
              "$ref" : "#/components/schemas/PcdmObject"
            } ]
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "CreateParentResponse" : {
        "type" : "object",
        "properties" : {
          "children" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/BaseEntity"
              }, {
                "$ref" : "#/components/schemas/FileEntity"
              }, {
                "$ref" : "#/components/schemas/PcdmCollection"
              }, {
                "$ref" : "#/components/schemas/PcdmObject"
              } ]
            }
          },
          "jobRequestId" : {
            "$ref" : "#/components/schemas/ObjectId"
          }
        }
      },
      "DeletionRecord" : {
        "type" : "object",
        "properties" : {
          "deletionId" : {
            "type" : "string",
            "description" : "The ID of deletion"
          },
          "entityExternalId" : {
            "type" : "string",
            "description" : "Entity External ID"
          },
          "reportStatus" : {
            "type" : "string",
            "description" : "The status of the generation of the deletion report"
          },
          "reportTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The Date/time stamp of when the deletion report was requested, in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "reportLastModified" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The last updated time of the deletion report in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "deletionStatus" : {
            "type" : "string",
            "description" : "The status of the deletion",
            "enum" : [ "Requested", "In Progress", "Failed", "Success" ]
          },
          "deletionTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The Date/time stamp of when the deletion was requested, in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "deletionLastModified" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "The last updated time of the deletion request in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2018-08-18 20:50:45"
          },
          "deletionError" : {
            "type" : "string",
            "description" : "The error message of a failed deletion"
          }
        }
      },
      "ResultListDtoDeletionRecord" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeletionRecord"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "MultiRequest" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "array",
            "description" : "File(s) to be ingested",
            "items" : {
              "type" : "string",
              "format" : "binary"
            }
          }
        }
      },
      "DatapoolPatch" : {
        "type" : "object",
        "properties" : {
          "quota" : {
            "type" : "integer",
            "format" : "int64"
          },
          "idealPkgSize" : {
            "type" : "integer",
            "format" : "int64"
          },
          "idealFileCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "packageInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxPayloadFileSize" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Schema" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "Field" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "string", "string-exact", "boolean", "number", "double", "date", "datetime", "id" ]
          },
          "label" : {
            "type" : "string"
          },
          "editable" : {
            "type" : "boolean"
          },
          "multiple" : {
            "type" : "boolean"
          },
          "abbreviation" : {
            "type" : "boolean"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "dbname" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListDtoSavedSearchQuery" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SavedSearchQuery"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for an entity present in the deletion scope"
          }
        }
      },
      "Errors" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for an entity present in the deletion scope"
          },
          "errors" : {
            "type" : "array",
            "description" : "A list of errors preventing the entity from be deleted",
            "items" : {
              "type" : "string",
              "description" : "A list of errors preventing the entity from be deleted"
            }
          }
        }
      },
      "DuplicateFiles" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for an entity present in the deletion scope"
          },
          "duplicateFiles" : {
            "type" : "array",
            "description" : "A list of duplicate files in the system which are not in the deletioin scope",
            "items" : {
              "type" : "string",
              "description" : "A list of duplicate files in the system which are not in the deletioin scope"
            }
          }
        }
      },
      "ResultListDtoMetadataNamespaceConfig" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetadataNamespaceConfig"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "FileWizardLocation" : {
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "LocationRecord" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "The label of the bucket"
          },
          "locationType" : {
            "type" : "string",
            "description" : "The location type of the location",
            "enum" : [ "Ingest", "Export", "Content Archive", "Metadata Archive" ]
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The name of the bucket"
          },
          "locationId" : {
            "type" : "string",
            "description" : "The id of the bucket"
          },
          "region" : {
            "type" : "string",
            "description" : "The region of the bucket"
          },
          "provider" : {
            "type" : "string",
            "description" : "The cloud provider of the bucket"
          }
        }
      },
      "FileWizardObject" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "BLOB", "FOLDER" ]
          },
          "mtime" : {
            "type" : "string"
          },
          "ctime" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "FileWizardObjectResponse" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileWizardObject"
            }
          },
          "marker" : {
            "type" : "string"
          },
          "lastPage" : {
            "type" : "boolean"
          }
        }
      },
      "UILocationSet" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "Job" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string",
            "description" : "Unique identifier for the job",
            "example" : "5eff15865f15030001e0b7e0"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the job",
            "enum" : [ "IN_PROGRESS", "PENDING", "SUCCEEDED", "FAILED", "SCHEDULED", "AWAITING_APPROVAL", "PREPARING_FAILURE" ]
          },
          "errorMessages" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Error messages of a failed job (status == FAILED)"
            },
            "description" : "Error messages of a failed job (status == FAILED)"
          },
          "jobTag" : {
            "type" : "string",
            "description" : "A custom tag used to link related jobs"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of job",
            "enum" : [ "BulkExport", "CMPUpload", "A6Upload", "AIPUpload", "SipCreation", "FileDownload", "Ingest", "ArchiveIngest", "Deletion", "ScheduledFixity", "Preservation", "Retention", "Hold", "HoldRemoval", "EditTree", "ArchivematicaSIPExport", "EntityLinkDetach", "UnpackIngest", "PreservationSetup" ]
          }
        }
      },
      "JobSummary" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string",
            "description" : "The ID of the job"
          },
          "jobTag" : {
            "type" : "string",
            "description" : "The Tag of the job"
          },
          "entitiesByStatusByStep" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "integer",
                "description" : "Number of entities by status by step",
                "format" : "int32"
              },
              "description" : "Number of entities by status by step"
            },
            "description" : "Number of entities by status by step"
          },
          "entitiesByAggregationType" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "description" : "Number of entities by aggregation type",
              "format" : "int32"
            },
            "description" : "Number of entities by aggregation type"
          },
          "contentByLocation" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "description" : "Content count per location",
              "format" : "int32"
            },
            "description" : "Content count per location"
          },
          "lastModifiedTime" : {
            "type" : "string",
            "description" : "The last updated time for the ingest",
            "format" : "date-time"
          },
          "overallStatus" : {
            "type" : "string",
            "description" : "Overall status of the job",
            "enum" : [ "IN_PROGRESS", "PENDING", "SUCCEEDED", "FAILED", "SCHEDULED", "AWAITING_APPROVAL", "PREPARING_FAILURE" ]
          },
          "overallStatusByPrecedence" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "IN_PROGRESS", "PENDING", "SUCCEEDED", "FAILED", "SCHEDULED", "AWAITING_APPROVAL", "PREPARING_FAILURE" ]
          },
          "lastModifiedTimeIfLater" : {
            "$ref" : "#/components/schemas/JobSummary"
          }
        }
      },
      "ResultListDtoJob" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Job"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ResultListDtoDatapool" : {
        "required" : [ "resultList" ],
        "type" : "object",
        "properties" : {
          "resultList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Datapool"
            }
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currentPage" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CleanupConfig" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "FileInfo" : {
        "type" : "object",
        "properties" : {
          "fileProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileProperties"
            }
          }
        }
      },
      "FileProperties" : {
        "type" : "object",
        "properties" : {
          "directory" : {
            "type" : "boolean",
            "description" : "Flag to denote whether this represents a directory"
          },
          "lastModified" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "Timestamp when the file metadata is last modified in the system in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2019-12-17 14:32:06"
          },
          "createdDate" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "Timestamp when the file is ingested into the system in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2019-12-17 14:31:56"
          },
          "size" : {
            "type" : "integer",
            "description" : "File size in bytes",
            "format" : "int64"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "UNKNOWN", "IMMUTABLE", "DC2_VERIFIED", "EscVerified" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the file"
          },
          "accessTime" : {
            "pattern" : "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31)) (2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])",
            "type" : "string",
            "description" : "Timestamp when the file is last accessed from the system in the format yyyy-MM-dd HH:mm:ss",
            "example" : "2019-12-17 14:32:06"
          },
          "md5" : {
            "type" : "string",
            "description" : "MD5 checksum of the file"
          },
          "adler32" : {
            "type" : "string",
            "description" : "Adler32 checksum of the file"
          },
          "sha256" : {
            "type" : "string",
            "description" : "SHA256 checksum of the file"
          },
          "sha512" : {
            "type" : "string",
            "description" : "SHA512 checksum of the file"
          },
          "local" : {
            "type" : "boolean",
            "description" : "Redundant field. This is applicable only for datapoolsets with tape location and Denotes whether a file is in the archive locations or not"
          },
          "path" : {
            "type" : "string",
            "description" : "Path of the file"
          }
        }
      }
    },
    "securitySchemes" : {
      "OAuth2" : {
        "type" : "oauth2",
        "in" : "header",
        "bearerFormat" : "jwt",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "Auth URL goes here",
            "scopes" : { }
          },
          "clientCredentials" : {
            "tokenUrl" : "Token URL goes here",
            "scopes" : { }
          },
          "authorizationCode" : {
            "authorizationUrl" : "Auth URL goes here",
            "tokenUrl" : "Token URL goes here",
            "scopes" : { }
          }
        }
      }
    }
  }
}